Zeyu Hao
zhao7@jhu.edu
Assignment 6: Interpreter

Makefile
===================================================================
There is a simple makefile included that will compile all the Java
programs needed in the package.
To use, simple enter 'make' or 'make all'.



Running the driver
===================================================================
The driver 'Sc.java' is run by a shell script called 'sc'.
The shell script 'sc' simply takes all command line arguments
passed to it from bash and feeds it to my Java driver.

Usage:
"./sc" ["-" ("s"|"c"|"t"|"a"|"i")] ["-g"] [filename]
if no filename is given, the driver prompts for input from stdin.

The compiler can be run with the following options:
-s runs the Scanner
-c runs the Concrete Syntax Tree generator
-t runs the Symbol Table generator
-a runs the Abstract Syntax Tree generator
-i runs the Interpreter
-g adds graphical output to the compiler functions above
   (must be used with -c, -t, or -g)
Any other form of driver use will cause exceptions to be thrown,
as well as a message to stderr.



The Scanner
===================================================================
One thing to note is that if the Scanner is currently nested within
x levels of comments when EOF is reached, then a stderr message will
be thrown describing this. Additionally, all tokens scanned up until
any illegal characters are printed out before the illegal character
is printed out as well. This is a tedious but really satisfying class.
Best.



Syntactic Analysis
===================================================================
My implementation of syntactic analysis is done by writing functions
for each of the Productions in the grammar. In the concrete grammar
for each Production, certain syntax must be followed. For example,
in order for any program to be valid, the program must start with
the terminal "PROGRAM". All other examples of required productions
or terminals are similarly enforced in the functions of my parser.
The enforcement is done by checking directly for the expected
syntax, and throwing a custom defined exception if the expected
syntax is not found.



Symbol Table
===================================================================
In order to implement the Symbol Table, I created an Entry class
with derived classes Variable, Constant, and Type. Type itself has
the derived classes Integer, Array, and Record. The actual record
table itself is held within a Scope class. Inside the parser, a
Universe Scope is first initialized which is assigned as the parent
Scope for the Program Scope. The Universe Scope contains the single
Integer Type entry and the Program Scope contains the actual symbol
table of the compiler. I extended the functionality of each of the
Declaration methods to insert Entries into the symbol table. For
example inside ConstDecl, I create a new Constant object with Type
Integer and value set to '5', and then insert the new Constant
into the symbol table. The symbol table is built similary for the
other Entry types, where each Entry is created once all the
required data is obtained while parsing through the functions.



Abstract Syntax Tree
===================================================================
In order to implement the AST, I created the Node class, with
derived classes like AST, Instruction, Location, Expression, and Conditon.
The Instruction class has a derived class for each of the known
instructions: Assign, Read, Write, etc. Following the Abstract
Grammar rules for Simple, the Location class has the derived
classes Index and RecordField. Although Variable is also a Location,
it is already defined in the Variable.java class,  which is an Entry.
Similarly, Expressions has its own derived classes of Binary and
Location. Number is already defined in the Constant.java class.

Inside the parser, we first reach the instructions() function, where
an AST node is created. From there, we parse one Instruction at a time,
hooking up each Instruction node to the AST in order. For example, if we
reach an Assign instruction, we first obtain the needed Location and
Expression data by parsing the expression() and designator() functions
(which themselves create Nodes) and then ultimately create an Assign
Node, which gets returned back to the instructions() function. This
repeats until we finish parsing instructions(), in which case the
fully finished AST node gets returned back to the original call to
program(), which sets the global AST to the AST just returned. 

In this assignment, a previous error where we couldn't run an
Instruction on a Location where Records were directly nested into
each other has been fixed.
Example:
---------------------------------------
PROGRAM As3;
  VAR v: ARRAY 12 OF RECORD f: RECORD f: RECORD f: INTEGER; END; END; END;
BEGIN
  z[7].f.f.f := 24
END As3.
---------------------------------------
The program above would have caused an incorrect error before because
the find_record() function did not traverse through record scopes correctly.



Interpreter
===================================================================
The interpreter constructs an Enviroment after the Symbol Table
has been fully created. Each Entry from the Symbol Table turns into
a Box object (either an IntegerBox, ArrayBox, or RecordBox) that is
initialized and then inserted into the Environment. Once the
Abstract Symbol Tree has been generated, the Parser calls the
interpret() function (from the AST class) which iteretes through
the AST and runs() each Instruction. Inside each derived Instruction
class, there is a run() function that interprets the instruction and
then interacts with the corresponding Box from the Environment. For
Example, if the run() function was called in Assign:
1) Find the correct Box from Environment specified by the Location
2) Insert the correct Expression value into the Location Box that
   we just selected from the Environment
Every Instruction instaneously updates the Environment whenever a
value is written to it.


Graphical Output
===================================================================
The Visitor design pattern was used to implement both the textual
and DOT graphical output. The Visitor abstract class includes an
overloaded visit() function for each Instruction and Entry type.
Additionally, for each of these Instructions and Entries there
exists an accept() function that allows the Visitor to visit the
Instruction/Entry and collect the necessary information to generate
the appropriate visual output. Inside the parser, a Visitor object
is attached just like the Observer. However, we don't visit anything
until after the entire AST/Symbol Table has been generated.
Inside the driver, returnAST() or returnST() is called from the
parser which uses the attached Visitor (either textual or graphical)
to traverse either the AST/Symbol Table. Once visiting begins, we
iterate through each Instruction of the Abstract Symbol Tree or
each Entry of the Symbol Table and then call the corresponding visit
function for each Instruction/Entry that we reach. 

In order to convert this DOT code into an image format
such as a PNG, the following commands should be used:

1) Pipe DOT code to a file, where filename is the SIMPLE code
./sc -i -g [filename.sim] > [filename.dot]

2) Convert DOT code to a PNG file
dot -Tpng [filename.dot] > [filename.png]

Supplying the -g commandline option will attach the
GraphicalVisitor to the parser in order to generate DOT code.
Otherwise, the TextualVisitor will be attached and the
textual representation of the syntax tree is displayed to
stdout.
